/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// LAYERS

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3

// MACROS

#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))

/ {
    chosen {
      zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        home_row: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
        };

        tap_d_playnext: tap_d_playnext {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_D_PLAYNEXT";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };
    };

    combos {
        compatible = "zmk,combos";

        accent {
            bindings = <&kp SQT>;
            key-positions = <8 9>;
        };

        layer {
            bindings = <&tog 1>;
            key-positions = <38 39>;
        };

        cap_wrd {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        L_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
        };

        R_Parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <32 33>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <33 34>;
        };

        mute_combo {
            bindings = <&kp C_MUTE>;
            key-positions = <5 17>;
            layers = <2>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <30 31>;
        };

        L_Brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
        };

        R_Brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Win {
            bindings = <
&none  &kp Q                     &kp W                 &kp E                     &kp R                   &kp T           &kp Y  &kp U                    &kp I                      &kp O                  &kp P                              &none
&none  &home_row LEFT_COMMAND A  &home_row LEFT_ALT S  &home_row LEFT_CONTROL D  &home_row LEFT_SHIFT F  &kp G           &kp H  &home_row RIGHT_SHIFT J  &home_row RIGHT_CONTROL K  &home_row RIGHT_ALT L  &home_row RIGHT_COMMAND SEMICOLON  &none
&none  &kp Z                     &kp X                 &kp C                     &kp V                   &kp B           &kp N  &kp M                    &kp COMMA                  &kp DOT                &kp FSLH                           &none
                                                       &kp TAB                   &kp BACKSPACE           &lt 2 ESCAPE    &mo 3  &kp SPACE                &kp ENTER
            >;

            label = "Base";
        };

        Mac {
            bindings = <
&trans  &kp Q                     &kp W                 &kp E                 &kp R                   &kp T    &kp Y  &kp U                    &kp I                  &kp O                  &kp P                      &trans
&trans  &home_row LEFT_CONTROL A  &home_row LEFT_ALT S  &home_row LEFT_GUI D  &home_row LEFT_SHIFT F  &kp G    &kp H  &home_row RIGHT_SHIFT J  &home_row RIGHT_GUI K  &home_row RIGHT_ALT L  &home_row RCTRL SEMICOLON  &none
&trans  &kp Z                     &kp X                 &kp C                 &kp V                   &kp B    &kp N  &kp M                    &kp COMMA              &kp DOT                &kp FSLH                   &trans
                                                        &kp TAB               &kp BSPC                &mo 2    &mo 3  &kp SPACE                &kp RET
            >;
        };

        lower_layer {
            bindings = <
&none  &kp LG(LS(S))  &kp PAGE_DOWN  &kp UP      &kp PAGE_UP  &kp C_VOLUME_UP    &kp N7  &kp N8  &kp N9     &kp KP_MINUS   &kp C_AL_CALCULATOR  &none
&none  &none          &kp LEFT       &kp DOWN    &kp RIGHT    &kp C_VOL_DN       &kp N4  &kp N5  &kp N6     &kp PLUS       &kp KP_MULTIPLY      &none
&none  &none          &kp LC(X)      &kp LC(C)   &kp LC(V)    &tap_d_playnext    &kp N1  &kp N2  &kp N3     &kp KP_DIVIDE  &none                &none
                                     &kp ESCAPE  &none        &mo 2              &mo 3   &kp N0  &kp ENTER
            >;

            label = "Lower";
        };

        raise_layer {
            bindings = <
&none  &kp EXCL   &kp AT        &kp HASH       &kp DLLR        &kp PRCNT    &none  &none  &none     &none  &none  &none
&none  &kp MINUS  &kp PLUS      &kp EQUAL      &kp UNDERSCORE  &kp CARET    &none  &none  &none     &none  &none  &none
&none  &none      &kp ASTERISK  &kp AMPERSAND  &none           &none        &none  &none  &none     &none  &none  &none
                                &kp LGUI       &none           &mo 2        &mo 3  &none  &kp RALT
            >;

            label = "Raise";
        };
    };
};
